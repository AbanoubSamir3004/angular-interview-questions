1- ما هي Angular؟
- هي فريمورك مفتوح المصدر متكامل (full-fledged) تستخدم لبناء الFront-end apps ولبناء الSingle-page-app (Spa)، تستخدم Typescript كلغة برمجة، تختص بالعديد من المزايا:
(HTTP requests, routing, layouts, forms, validations, reactivity, Data- binding, Testing, Directives, pipes, encapsulation, Internationalization, Dependency Injection).
وهي تتبع معمارية الComponent-Based Architecture.
بعد ما تقول ده كله او جزء منه حاول تشرح بقدر الإمكان الحاجة الحاضرة في ذهنك وقت السؤال.
-----
2- ما هو الArchitecture الخاص بAngular؟
- الAngular بني على معمارية MVVM اختصارً لModel-View-ViewModel، وهذه هي المعمارية الأساسية للAngular.
لو كان السؤال عن الArchitecture overview يبقى الإجابة كالتالي:
هتتكلم عن الMain building blocks الموجودة في الAngular مع المعلومات الي انت تعرفها عنهم.
اتكلمت عن ده في مقال سابق (هتلاقيه في الكومنتس)، بالإضافة إلى إن السؤال ده لا تجوز عليه إجابة مختصرة فهيكون له مقال منفصل.
-----
3- ما هو الSPA داخل الAngular؟ وقارنه بالطرق التقليدية لبناء تطبيقات الويب.
- الSingle page app هو نوع من التطبيقات التي تعمل ضمن صفحة واحدة وتقوم بتحديث محتواها ديناميكيًا عندما يتفاعل المستخدمون معها وكل ذلك دون الحاجة إلى تحديث الصفحة.
المقارنة:
الSPA:
مميزات:
- يتم تحميل صفحة Html واحدة.
- تحديث المحتوى ديناميكي.
- إنشاء الطلبات لا يحتاج لتحميل صفحات وتعمل من خلال الHttpClient في حالة Angular؛ حيث أن الHttp client تتعامل مع الAPI.
- الPerformance أفضل.
- تجربة مستخدم أفضل؛ حيث أنه لا يحدث تحديث للصفحة.
- تعزز عملية البناء للفرونت بشكل منفصل عن الباك.
عيوب:
- ضعف الSEO؛ لأنها CSR.
الطريقة التقليدية (MPA):
عيوب:
- تحميل العديد من الصفحات: كل تفاعل يؤدي لتحميل صفحة جديدة.
- تفاعل محدود.
- تحديث الصفحة عند التفاعل معها.
- عبء الشبكة (Network Overhead).
- لا تعزز عملية بناء الفرونت بشكل منفصل.
مميزات:
- تمتلك SEO أفضل بكثير؛ لأنها SSR.
-----
4- ماذا تعرف عن angular flex؟
- الangular flex هي 3rd library تم بناءها من مجتمع الAngular وتم تصميمها لتعزيز عملية البناء بالCss flex والCss grid، هي عبارة عن Directives تضاف إلى العناصر لتسهيل عملية التنظيم.
المميزات:
- الResponsive Layouts.
- الFlexbox and Grid.
- الMedia Queries.
- الDirective-based Approach: أي أنها تعتمد على الDirectives وليس الClasses.
- الFlex and Layout Attributes
- الAngular Integration: لأنها بنيت لتساعد الAngular؛ فهي مرتبطة ارتباط متكامل مع الAngular.
-----
5- الAngular service هل هي stateful ام stateless؟
- الAngular service هي stateless لكن من الممكن ان تكون stateful.
ومعنى stateful انها تتبع state (حالة) معينة في الApplication الخاص بك، لذا توفر Angular العديد من المميزات التي تسمح بإستخدام الservice كstateful.


6- ما الفرق بين ForRoot والForChild؟
الForRoot:
- تستخدم للModule الرئيسي فقط الذي غالبًا يكون App module.
- ينشئ ويوفر instances جديدة من الservices وينشئ الsingleton pattern.
- يساعد في أن تبقى الServices المشتركة في حالة مستقرة عبر التطبيق.
الForChild:
- يستخدم داخل الfeature modules لتكوين الrouting والservices الفرعية الخاصة بهذه الميزة يوضع داخل أي routing لmodule غير الAppModule.
- لا ينشئ instances جديدة من الservices.
- مفيد لتغليف (encapsulate) الfeature modules بدون التأثير على الApp ككل.
-----
7- هل الShared Modules عبارة عن Lazy modules؟
-الShared modules تهدف لتوفير Components وDirectives وPipes وServices لجميع الModules داخل الApplication اذا وضعت داخل الAppModule؛ ففي هذه الحالة لا تكون lazy.
- اما اذا وضعت داخل Modules محددة من الFeature modules فإنها تحمل وتعمل عندما يحمل ويعمل الModule الذي يعمل بها، ففي هذه الحال نستطيع أن نقول نعم.
-----
8- ما الفرق بين ViewChild والContentChild؟
الViewChild:
- يستخدم للوصول إلى العناصر في الTemplate.
- يسمح لك بالتحكم بعنصر داخل الTemplate مشار له بمتغير الreference.
- يمكنه الوصول لجميع عناصر الHtml الأصلية مثل: h1, p, button.
- يمكنك من خلاله التحكم في child compoent.
- تعمل مع الLife cycles الخاصة بالView.
- يتعامل مع الShadow dom.
الContentChild:
- يستخدم للوصول للعناصر التي بداخل Component آخرى (content projection).
- تستطيع التعامل مع عنصر واحد خارج الComponent الخاصة بك والإشارة ب<ng-content> في الcomponent التي تحتوي على ContentChild.
- يكون مفيدًا اكثر عندما يتعامل مع المحتوى الداخلي.
- يتعامل مع الlife cycles الخاصة بالcontent.
- يتعامل مع الLight dom.
----
9- ليه استخدم الprovidedIn داخل الService؟
- هي metadata داخل decorator injectable الخاص بالservice وبتستخدم لأسباب كثيرة أهمها التلاتة دول:
- التكوين المركزي (Centralized Configuration): وده بدل ما كل ما هتستخدم الservice تروح تستدعيها في providers الModule أو الComponent، انت ممكن تخليها الdefault بتاعها providedIn: "root"، وبكدا هتاخد منها instance لما تيجي تستخدمها في الcomponent سواء بالinject او باقي طرق الDependancy Injection.
- الTree Shaking: وده من الperformance المتوفرة في الAngular في الوضع الافتراضي؛ الprovidedIn بتخلي الservice تبقى tree shakable، يعني بتمسحها من الfinal bundle في حالة اذا كانت لم تستخدم.
- الLazy Loading: لما يكون متوفر الmetadata الي هي providedIn؛ فده معناه انك متستخدمهاش غير لما احتاجها وده بيدعم الLazy loading.
----
10- ما الفرق بين navigate وnavigateByUrl؟
- لا يوجد فرق كبير:
الnavigateByUrl:
- تطلب منك وضع القيمة بشكل مباشر كstring.
- ليست مرنة؛ لأنك تحتاج لوضع الرابط كاملًا.
- قديمًا قبل التحديثات، كان يمكنك وضع رابط خارجي بداخلها.
الnavigate:
- تطلب منك array به القيمة.
- مرنة؛ تسطتيع التعامل مع الroutes المرتبطة بroute الcomponent الخاص بك.



11- ما الفرق بين Eager Loading وLazy Loading وPre-Loading في الAngular؟
- في الAngular التلاتة عبارة عن تكنيك للتحكم في الLoading والrendering (استدعاء) الmodules والcomponents.
-الEager loading:
هو الوضع الافتراضي في الAngular وهو عبارة عن تحميل جميع الmodules والcomponents المطلوبة بمجرد تشغيل الapplication، وهذا يعني انك قبل استخدام هذه الcomponents فإنها بالفعل تكون عملت rendering بغض النظر عن اذا كان المستخدم سينتقل لها او لا وهذا خاطئ ولا يجوز استخدامه؛ لأنه يؤدي لفترة تحميل أولية طويلة جدًا (initial loading) لا نحتاجها ويجعل الموقع عند فتحه بطئ جدًا.
-الlazy-loading:
هو تيكنيك لجعل الmodule المطلوب يعمل عند الدخول لمساره فقط؛ فلا يكون هناك initial loading إلا عند طلب الmodule او الcomponents لأنه يقسم المشروع لاجزاء لا تحمل إلا عند طلبها؛ فيكون التطبيق أسرع بصفة عامة.
-الPreloading:
هو تحقيق للتوازن بين الEager والLazy؛ لأنه عند فتح التطبيق سيجلب لك المطلوب ولكنه في الخلفية (background) بدون شعور المستخدم؛ سيحمل باقي الmodules المطلوبة (حسب التوقع) لذا عند إنشغال المستخدم بالتعامل مع جزء من التطبيق تكون باقي الأجزاء التي قد يذهب إليها المستخدم في هذه اللحظة قد تم تحميلها؛ فيوفر ذلك تجربة اكثر سلاسة للتصفح.
----
12- ما هي الDirectives (أنواع وإستخدامات)؟
- في الAngular الdirectives تسمح لك بالتعديل على سلوك (behavior) الDom، ولها ثلاث أنواع:
1-الStructural:
وهذا النوع مسؤول عن معالجة بنية DOM عن طريق إضافة أو إزالة العناصر بناءًا على شروط معينة وهو مسبوق بعلامة (*) في البناء داخل الTemplate.
الأمثلة: *ngFor و *ngIf و *ngSwitch
2-الAttribute:
يقوم بتعديل مظهر أو سلوك عنصر أو component أو directive آخر، يتم استخدامها ك(Attributes) لعناصر HTML.
الأمثلة: ngClass و ngStyle و ngModel
3-الComponent:
الComponent هي نوع من أنواع الDirectives ولكن لها Template خاص بها.
----
13- ماذا تعرف عن الSingleton والModularity وعلاقتهما بالAngular؟
-الSingleton:
هو Creational pattern يضمن أن يكون الClass له instance واحد فقط.
فمثلًا في Angular: نستخدم هذا الpattern مع الServices، حيث أنه يكون له instance واحد وهذا يضمن أن البيانات والحالة التي تحتفظ بها الخدمة متسقة ويمكن الوصول إليها من الComponents المختلفة، ستجد أننا أشرنا إلى أن providedIn في الService هي ما تضمن ذلك راجع السؤال رقم 9 من المقال الثاني.
-الModularity:
هو مبدأ (principle) تصميمي لتقسيم النظام المعقد إلى وحدات أصغر مترابطة ومكتفية بذاتها وقابلة للمشاركة والتبديل فيما بينها، وهذا يعزز الmaintainability (قابلية الصيانة) والreusability (إعادة الإستخدام) والcollaboration (التعاون).
في حالة Angular:
فإننا نقسم الApp لنوعين من الModules.
-الCore module:
وهو Module يحتوي على Singleton services تستخدم في كل الApplication، هذه الServices تساعد على عمل shared functionality وstate management وهذا الmodule يجب وضعه في الApp module.
-الFeature Modules:
وهي باقي الModules داخل الApplication التي تخدم عملية البناء والencapsulate (التغليف أو الانعزال) وتستخدم components وservices تؤثر في بعضها بعضًا.

14- كيف تزود الperformance في ابليكشن Angular أو اذكر 3 طرق لزيادة الperformance مع Angular؟
بالترتيب حسب الأهمية:
1- الLazy Loading
2- التصغير والضغط (Minification and Compression).
3- الCode Splitting تصغير الbundle size والinitial bundle size.
4- الOptimizing Images.
5- الCaching.
6- الTree Shaking.
7- الAsync Loading.
والكثير من المزايا الآخرى.
----
15- ما هو الChangeDetectionStrategy؟
السؤال ده إجابته كبيرة، السائل عايز يعرف فهمك لكيفية عمل آلية الكشف عن التغيير في Angular وكيف يمكنك تحسين الأداء في موقعك.
الإجابة:
يعد ChangeDetectionStrategy في Angular خيار يحدد كيفية اكتشاف إطار العمل للتغيرات في بيانات الcomponent والتفاعل معها إنه يحدد متى يجب على Angular تشغيل اكتشاف التغيير وإعادة عرض DOM بناءً على التغييرات في خصائص الComponents والdata بتاعتها.
عشان تضيف الاستراتيجي للcomponent بتعملها metadata وبتحدد نوعها وهي ليها نوعين:
1- الdefault (دايمًا بيعمل check):
هذه هي الاستراتيجية الافتراضية يتحقق Angular من التغييرات في جميع خصائص الcomponents ويطلق اكتشاف التغيير لشجرة الcomponents بأكملها عندما يتم اكتشاف تغيير يمكن أن يؤدي ذلك إلى دورات متكررة وربما غير ضرورية للكشف عن التغيير، مما يؤثر على الأداء.
مثال:
- لو عندك parent وchild وفي الchild في function بتشتغل لما الcomponent بتظهر في الView؛ فكل ما يضغط على زرار في الparent الchild بيروح يشغل نفس الfunction الي هي شغالة بالفعل، وكإنه بيجيب نفس الداتا تاني وده طبعًا غلط.
2- الonPush:
الاستراتيجية دي أكثر كفاءة وبتحل المشكلة دي.
بس فيها مشكلة وهي إنك لازم أي حاجة بترجع داتا ومثلًا get لازم تعمل بداخلها: markForCheck ودي function داخل ChangeDetectorRef عشان تشغلها هتعمل instance منه وتشغل منه الfunction بسطر بسيط يتحط في اخر الfunction.
مثلًا: this.cdr.markForCheck();
*ملحوظة لو بتعمل get وبدون الكلام ده مفيش داتا هترجعلك نهائي.
*ملحوظة مهمة الAsync pipe بتوفر عليك الكلام ده كله وأسهل وأبسط طبعًا الكلام ده لو بنتكلم في نقطة الdata، لكن الاستراتيجية بتحل مشاكل تانية غير انها ترجع data.
----
16- ما هو الViewEncapsulation وكيف يمكنك تطبيقه؟
جاوبت السؤال في مقال منفصل ولكن نجاوب هنا إجابة سريعة:
- هو سلوك تستخدمه الAngular لتغليف الstyle الخاص بالcomponent؛ فمثلًا انت لو اديت لp ستايل في component معينة، باقي الcomponent الي فيها p مش بتتأثر؛ لإنه بيكون مغلف بattr يمنع ذلك.
كيف تطبيقه:
بتيجي في الmetadata بتاعت الcomponent وبتكتب ده:
encapsulation: ViewEncapsulation.None
وله 3 انواع:
1-الEmulated: وده الdefault وبيعمل نفس الي قولناه فوق؛ فلو مضفتش الencapsulation كmetadata الAngular بيعملها تلقائي.
2-الNone: وده بيمنع التغليف او ان الكود المكتوب في الcomponent يكون خاص بيها، لا بيخليه global وبيسمح له بالتأثير الخارجي وله فوايد منها:
- في مكتبات مش بينفع يتعدل عليها غير بوجوده؛ لإنه بيأثر globally.
- لو عايز تبدل ملف style في البروجيكت.
3-الshadowDom: وده بيمنع الComponent انها تاخد أي Style من الStyles الرئيسية، ولكن بتسمحله انه ياخد من Component تانية.


17- ما الفرق بين الpipe والdirective؟
طبعًا الاتنين بيساعدونا في عمل بروجيكت Angular لكن كل واحد فيهم بيعمل حاجات مختلفة.
-الdirective:
= الغرض من الdirective هو توسيع/تغيير السلوك (manipulate the DOM) وتطبيق Style وإضافة عناصر وحذفها.
= الdirective تستخدم ل(التحكم في رؤية العناصر، التكرار، تطبيق المنطق الشرطي(conditional logic)، عمل reusable components).= الdirective ليها 3 أنواع: (structural وattribute وcomponent) وكل نوع له طريقة مختلفة في الكتابة:
-الstructural بعلامة * قبل الdirective
-الattribute يوضع بين Square brackets [].
-الcomponent له Template وClass.
---
-الpipe:
= الغرض من الpipe هو تحويل البيانات وتنسيقها قبل عرضها في الtemplate.
= الpipe تستخدم لتنسيق البيانات مثل (تنسيق التاريخ، تنسيق الأرقام، تحويل العملة).
= الpipe له أنواع في الكتابة ايضًا:
-الsyntax العادي {{ name | uppercase}}
-الparameterized pipe يكتب {{ birthday | date:'dd/MM/yyyy'}}.
-الchain pipes مثلًا: {{ birthday | date:'fullDate' | uppercase}}
-------
18- ما هو الmain http module في الAngular؟
- هو الHttpClientModule.
-------
19- ما هي الlife cycle hooks في الAngular؟
- هي عبارة عن Methods تسمح لك بتنفيذ إجراءات في نقاط محددة في عمليات إنشاء الComponent وتحديثه وتدميره، أي انها تساعدك على تنفيذ التعليمات البرمجية عند وقوع أحداث معينة.
تعالى نفصلها واحدة واحدة وبالترتيب، قبل Angular 16 كان عندنا 8 فقط life cycle وهم الي هيتذكروا دلوقتي:
1- الngOnChanges:
يستدعى عند تغير خصائص داخل الComponent.
2- الngOnInit:
يتم استدعاءه بعد تهيئة الcomponent وتعيين خصائصه، مكان جيد لإجراء الإعداد الأولي وجلب الdata من الservices.
3- الngDoCheck:
يتم استدعاءه أثناء كل دورة change detection يمنحك فرصة لعمل custom change detection logic.
4و5- الngAfterContentInit والوngAfterContentChecked:
يتم استدعاءهما بعد عرض المحتوى (content) وفحصه.
6 و7- الngAfterViewInit والngAfterViewChecked:
يتم استدعاءهما بعد عرض القالب (template) بالكامل؛ لذا فالأول يسهل عملية التعامل مع الdom من خلال ViewChild والثاني يفحص بعد إكمال تحميل التمبلت بالكامل.
8- الngOnDestroy:
يتم استدعاءه بعد ان يترك المستخدم الComponent؛ فهو يعمل على تنظيف الdata التي طلبت عن طريق عمل unsubscribe للObservables بداخله.
-------
20- هل الConstructor عبارة عن life cycle hook؟
- الإجابة: لا.
-------
21- ما الفرق بين الConstructor والngOninit؟
الConstructor:
هو method لClass الTypescript يستخدم لعمل initial properties وdependencies ويستخدم لعمل inject للservices ويتم استدعاءه قبل جميع الlife cycle وليس مناسبًا للcomplex logic أو الasynchronous operations.
الngOninit:
هو Angular lifecycle hook، يستخدم لتعيين مدخلات الComponent ومصمم خصيصًا لتنفيذ مهام التهيئة؛ واكثر أمانًا في تنفيذ عرض البيانات وغيرها من المهام.

22- ما الفرق بين ViewChild وViewChildren في الAngular؟
كلاهما عبارة عن decorators بنستخدمهما لعمل access الChild component او directives او عنصر مشار له بالrefrence مثال الوسومات (هاشتاغ)#refrence.
الفرق الأساسي هو ان الأولى للمفرد والتانية للجمع وتعالى اديك نقاط المقارنة:
1- الViewChild:
-يستخدم للوصول إلى عنصر/component واحد.
-يوفر (refrence) للتواجد الأول لنوع العنصر/الcomponent المحدد.
-يسمح لك بالتفاعل مع الprops والmethods للعنصر/الcomponent المشار إليه مباشرة.
-إذا تم إنشاء الchild ديناميكيًا او متأثر ب*ngIf ستحتاج لوضع { static: false } لضمان تواجدها.
-يمكن استخدامه للوصول إلى عنصر في الDom بالrefrence.
---
2- الViewChildren:
-يستخدم للوصول إلى instances متعددة من العناصر/الcomponents.
-يرجع QueryList تسمح لك بالتكرار على قائمة العناصر/الcomponents وملاحظة التغييرات التي تطرأ عليها.
-مفيد عند التعامل مع الinstances المتكررة للChilds، او المتأثرة ب*ngFor.
-يتطلب استخدام أساليب QueryList، مثل forEach ويسمح لك بتنفيذ إجراءات على instances متعددة.
--------
23- ما هو الفرق بين ContentChild وContentChildren؟
كلاهما عبارة عن decorators يستخدما للوصول إلى المحتوى المعروض في الComponent يسمحان لك بالتعامل مع المحتوى الذي يتم عرضه من خلال Angular's content projection mechanism، وبينهما إختلافات.
1- الContentChild:
- يستخدم للوصول لعنصر/component واحد من المحتوى المعروض.
- يوفر (refrence) للتواجد الأول لنوع العنصر/component المعروض.
- يكون مفيدًا عند التعامل مع <ng-content>.
- يتطلب { static: false } اذا كان ديناميكيًا او يتعامل بال*ngIf.
---
2- الContentChildren:
- يستخدم للوصول إلى العديد من العناصر/الComponents المعروضة.
- تقوم بإرجاع QueryList التي تسمح لك بالتكرار.
- مفيد عند التعامل مع الinstances المتكررة للمحتوى.
- يمكن استخدامه للتفاعل مع التغييرات في المحتوى المعروض، لكنه لا يلاحظ تلقائيًا التغييرات في المحتوى المعروض بالعمق الذي يفعله ViewChildren
--------
24- كيف يعمل بروجيكت الAngular ماذا يبدأ اولًا؟
ممكن ده أسهل سؤال في الAngular لإنه بيختبر معرفتك بالستراكشر الأساسي لAngular والخطوات؛ نبدأ بسم الله:
1- ملف الangular json:
بيكون فيه الconfiguration الأساسي للبروجيكت بتاعك ومن ضمن الConfig هتلاقي داخل الoptions موجود main والmain ده بيكون متحدد من خلاله ملف الmain ts لو حابب تغيره براحتك.
--
2- ملف الmain ts:
ده بيكون الentry point حسب ما أنت حددت في ملف الconfiguration السابق وفي الوضع الإفتراضي هتلاقي عامل حاجة اسمها bootstrapModule للApp Module يعني ابدأ بالModule ده.
--
3- الapp module ts:
هتلاقيه عامل bootstrap: [AppComponent] يعني بيبدأ بالAppComponent.
--
4- الAppComponent:
هتلاقي ليها selector اسمه app-root.
--
5- الindex html:
هتلاقيه مرجعلك اسم الselector الي هو: <app-root></app-root> وبكدة الIndex او الSingle page بتاعت البروجيكت بتبدأ معاك من الapp-root او الي اسم الclass بتاعها AppComponent وبكدة هي بتبدأ عرض من الApp component html بالrouting.


25- بكم طريقة يمكنك عمل provide لservice في component مع الAngular؟
في حالة الComponent هم طريقتين فقط، ولكني سأكتب لك كل الطرق الممكنة لعمل provide للservice نبدأ من الComponent:
1- الConstructor Injection:
عن طريق عمل instance للservice كparameter للconstructor method، مثال: constructor(private myService: MyService).
--
2- الProperty Injection:
هناك decorator يسمى @Inject يمكنك استخدامه لهذه المهمة: @Inject(MyService) private myService: MyService
----
3- الRoot Injector:
يمكنك إضافة أي service تريد ان تستخدمها في الApplication ككل عن طريق وضعها في الAppModule مثال: providers: [YourService].
--
4- الLazy Loaded Module Injector:
في حالة أنك تريد توفير الService لmodule داخلي يمكنك عملها بنفس الطريقة السابقة ولكنها ستعمل على هذا الmodule فقط وليس الApp ككل.
--
5- الHierarchical injectors:
او الinject الهرمي وهو ايضًا يستخدم ما تم شرحه في رقم 1 و2 ولكن في هذه الحالة هو يتبع سلوك هرمي يبحث Angular تلقائيًا عن instance لservice في تسلسل هرمي للحاقن، بدءًا من الcomponent الطالب والانتقال للأعلى عبر الحاقنات الأصلية.
--------
26- كيف يمكنك عمل Error handling في الAngular؟
- ده سؤال عميق جدًا، تعالى نجاوب بالتفصيل.
المعاملة مع تصحيح الاخطاء في الAngular لها 3 جوانب أساسية:
1- الGlobal Error Handling:
وهو عن طريق عمل service بimplements الErrorHandler يعمل على Handle كل الايرورز الي في الابليكشن وتوفر بداخلها function ترجعلك الerror على هيئة alert او في الconsole براحتك.
بيتعمله provide في الModule.
--
2- الHTTP Interceptors for API Errors:
الInterceptors بتكون افضل اختيار للتعامل مع الApi Errors؛ فلو مثلًا عندك login page وعايز تسجل بأكونت غير موجود في الداتا، الbackend بيرجعلك ايرور 404؛ فأنت بتتعامل معاه عن طريق الinterceptor وبناء عليه داخل الComponent بتظهر للمستخدم انه الاكونت غير مسجل في الموقع.
وبشكل عام ده يحصل لكل الايرورز 401 و400 و409 وله اكثر من استخدام وكان في مقال كامل بيتكلم عن ليه تستخدم الInterceptors.
وبيتعمله provide في الModule برضو.
--
3- الComponent-Level Error Handling:
وعندنا نوعين هنا
نوع Sync او Async:
- وهو النوع الي بتعامل فيه بالtry وcatch بتوع الjavaScript عادي في حالة ان الداتا راجعة كArray او Object.
ونوع Reactive:
- وهو مثلًا لو داتا رجعالي من Observable؛ فلازم اتعامل معاها بmethods الrxjs وهو عن طريق انك داخل الsubscribe اول حاجة رجعالك هي الdata وتاني حاجة رجعالك هي الايرور وهنا نقدر نتعامل معاه.
- وبرضو ينفع نتعامل بالCatchError من الخارج او كoperator داخل pipe سواء في الComponent-level او في الinterceptors.
--------
27- ما الفرق بين BrowserModule والCommonModule في الAngular؟
- الBrowserModule: يوضع في الroot module لتشغيل الApplication ولا يجوز وضعه في Modules آخرى.
- الCommonModule: يوضع في أي Module يحتاج للDirectives او الpipes التي بداخله مثل *ngIf و *ngFor.
--------
28- كيف تنشأ class بالAngular cli؟
عن طريق الأمر (ng generate class className) او (ng g class className).



29- ما هو الinterpolation في الAngular؟
- هو عملية تضمين التعبيرات أو المتغيرات داخل double curly braces مثلًا: {{myExpression}} حيث ينقل هذه المتغيرات من class الTypescript الخاص بالComponent إلى الView، يتم بيه عمليات بسيطة آخرى زي العمليات الحسابية وغيره، وبيساعد الDirectives زي الngFor في عرض محتوى البيانات المتكرر، وممكن تعرض من خلاله صورة الpath بتاعها عبارة عن تعبير في الClass.
------
30- ما هو الbootstrapping module في الAngular؟
- هي الوحدة المسؤولة عن تحديد نقطة الدخول لتطبيقك، وتحديد الComponent/الComponents الذي يجب تهيئته وتقديمه عند بدء تشغيل التطبيق.
------
31- ما الغرض من الbase href tag في الAngular؟
- يحدد الUrl الرئيسي الي يبدأ منه الApplication وهذا الكود:
<base href="/">
يعني انك ستفتح الموقع بمجرد فتح الرابط الرئيسي، ولكن اذا غيرت فيه؛ فسيصبح كالتالي:
yourDomain/yourWord.
ثم تأتي بباقي الRouting.
------
32- ما الفرق بين @Component و @Directive في الAngular؟
- الاتنين عبارة عن decorators بيتم استخدامهم لبناء اجزاء من الAngular والاتنين بينشأوا Directive ولكن الComponent هو نوع مخصص وذو أهمية أكبر من الDirective العادي في الAngular.
بإختصار شديد:
- الComponent:
بتنشأ جزء كبير من الAngular بل وهو الجزء الأساسي المبني عليه الFramework وبيكون مهمته تغليف القوالب والمنطق والبيانات (Typescript) وعمل واجهة مستخدم Html وCss.
- الDirective: 
تعمل على توسيع سلوك أو مظهر عناصر DOM دون توفير قوالب خاصة بها.
الفرق الأساسي ان الComponent اكبر وله قالب (Template) خاص.
------
33- ما الفرق بين *ngIf و[hidden] في الAngular؟
- الاتنين عبارة عن Directives ولكن:
الngIf: هي Structural وزي ما قولنا قبل كدة Structural يعني بتأثر في الdom يعني تمسح وتضيف وتكرر.
الhidden: هي Attribute وده مهمته يغير في المظهر (style) مش في الDom.
يعني الفرق ما بينهم بإختصار شديد، الngIf بتشيل الdom كاملًا وبتضيفه كاملًا على حسب هي true ولا false ولكن الhidden بتديه display: none من خلال الcss مش اكتر ولكن بيفضل الdom زي ما هو.
استخدم ده امتى وده امتى؟:
- لو الحاجة تتطلب تأمين وخطوة لازمة لخطوة يبقى الأفضل ngIf.
- لو الحاجة عادي مش لازم تأمين والStyle بتاعك في شوية حاجات absolute؛ فالأفضل hidden.
لانك لو جربت ngIf وعندك حاجات absolute هتكون متعبة في انك تخليها منظمة كويس لما تظهر وتختفي والله يكون في عونك لو اجتمع عليك الabsolute مع التأمين.
------
34- ما هو المقابل من Angular js لngShow وngHide في الAngular؟
- المقابل لngShow هو *ngIf.
- المقابل لngHide هو [hidden].
------
35- ما هي الService في الAngular ومتى استخدمها؟
- الService تحتوي على functionality أو data أو logic محدد يمكن مشاركته عبر أجزاء مختلفة من تطبيقك، تستخدم لتنظيم الابليكشن وتسهيل المشاركة.
واستخدمها لو محتاج التالي:
1- الReusability: اعمل الحاجة مرة واستخدمها في كذا مكان.
2- الSeparation: تقسيم اللوجيك.
3- الData Sharing.
4- الData Fetching.
5- الBusiness Logic.
6- الExternal Interaction.
وطبعًا ليها مميزات تانية كتير، كلها مرتبطة بالمذكورين.


36- ما الفرق بين الComponent والModule؟
- الاتنين Main building blocks وضروريين لتشغيل Application Angular طبعًا الكلام ده قبل 14؛ لإن حاليًا تقدر تعمل بروجكيت بدون Module.
 يلا نوضح دور كل منهم بالتفصيل.
1- الComponent:
- عبارة عن class مرتبط بtemplate يحدد طريقة الview.
- مسؤول عن عرض الview ومعالجة تفاعلات المستخدم مع الview.
- يتم تعريفه بإستخدام @Component.
- يمكن له التفاعل مع الComponents الآخرى والServices داخل الModule الي هو مرتبط بيه.
--
2- الModule:
- عبارة عن container لمجموعة من الComponents والDirectives والPipes.
- يمكن ان يحتوي على services وpipes وdirectives وcomponents تقدر تستخدمها في أي component مرتبطة بالModule.
- بيتعرف بإستخدام @NgModule.
------
37- ما الفرق بين الAngularJs وAngular؟
1- الAngularjs:
- معمارية Mvc.
- اللغة javaScript.
- الDependency Injection ضعيفة.
- الChange Detection ضعيفة.
- مفيش SEO-friendly.
- الRouting بمكتبة خارجية.
- دعم الموبايل محدود.
- لا يوجد Cli.
- أسهل في التعلم.
- توقف دعم جوجل عنها.
---
2- الAngular:
- معمارية component-based.
- اللغة Typescript.
- الDependency Injection قوية.
- الChange Detection الحد الأقصى.
- بتوفرلك خيار الSSR عن طريق Universal يعني SEO-friendly.
- الRouting موجود.
- دعم الموبايل ممتاز وللحد الأقصى.
- يوجد Cli
- أصعب بكتير في التعلم.
- لم يتوقف عنها دعم جوجل.
------
38- ما هي الGuards في الAngular وما هي أنواعها؟
تعد الGuard ميزة تسمح لك بالتحكم في سلوك التنقل والوصول للroutes، يتم استخدام الGuards لحماية الroutes، مما يضمن استيفاء شروط معينة قبل السماح للمستخدم بالانتقال إلى route معين.
وهم 5 أنواع:
1- الCanActivate:
- يحدد هذا الguard ما إذا كان مسموحًا للمستخدم بالانتقال إلى الroute.
--
2- الCanDeactivate:
- يتم استخدام هذا الguard لتحديد ما إذا كان بإمكان المستخدم مغادرة الroute الذي يحتوي على تغييرات غير محفوظة.
--
3- الCanLoad:
- يتحقق هذا الguard من إمكانية تحميل الوحدة كlazy قبل الانتقال إلى route الmodule، يعد ذلك مفيدًا للسيناريوهات التي تريد فيها تحميل الmodules بناءً على شروط معينة، مثل مصادقة المستخدم.
--
4- الResolve:
- يتم استخدام الResolve لجلب البيانات قبل تنشيط الroute، يعد هذا مفيدًا للسيناريوهات التي تريد فيها تحميل البيانات مسبقًا لأحد الcomponents قبل عرضها.
--
5- الCanActivateChild:
يمكن أيضًا تطبيق الguards على الroutes الفرعية ضمن الroute الأصلي، إنهم يعملون بشكل مشابه لنظرائهم في المستوى الأعلى.
------
39- ماذا تعرف عن ngTemplateOutlet*؟
هذا السؤال من الصعب إجابته بدون إرفاق العديد من الصور والأكواد؛ فهو يحتاج لوقت طويل من الشرح كفيديو؛ لذلك الإجابة المختصرة هنا ستكون:
هو structural directive للتحكم في اخفاء وإظهار <ng-template> بناء على logic معين او role محدد للمستخدم، ويمكنه مساعدتك في عمل reusable component.
وانصحك بمشاهدة هذا الفيديو ربما يساعدك في رحلة بحثك:
https://lnkd.in/dBc4hTRC

40- ما الفرق بين ng-container وng-template؟
1- الng-container:
- هو directive بسيط يستخدم لتجميع العناصر دون الإخلال بالlayout او السماح للstyle بالتأثير.
- يعد هذا مفيدًا إذا كنت لا تريد إضافة div؛ فمثلًا لديك *ngFor و*ngIf فبدل استخدام div داخل div وربما هذا الdiv له style خاص؛ فيمكنك استخدام ng-container؛ فما هو الا حاوية للأكواد ولا تؤثر في الDom.
- يظهر في الوضع الافتراضي.
--
2- الng-template:
- هو directive لتجميع العناصر ايضًا، ولكن لإستخدامها كdynamic تمبلت؛ حيث انك يجب ان تحدد reference للtemplate المنشئ.
- من خلال الdirectives المشهور مثل: ngFor وngIf وngTemplateOutlet يمكنك تحديد أي الTemplates المسموح لها بالظهور او الاختفاء.
- لا يظهر في الوضع الافتراضي، يجب ان يظهر من خلال موافقته لشروط directive آخرى.
-----
41- ماذا تعرف عن الng-container؟
- راجع الاجابة 1 في اجابة السؤال رقم 40.
-----
42- ماذا تعرف عن الng-content؟
- يستخدم للتحكم فيما يعرض؛ فمثلًا لو لديك child component وتريد تمرير html code من الParent component يمكنك عن طريق الng-content فعل ذلك.
- ستذهب للParent component وتضع بداخلها الchild وبداخل الtag الخاص بالchild تضع ما تريد وسيعرض هذا في الchild component بدلًا من الng-content.
- وله ايضًا مميزات التحكم فيما يعرض عن طريق الattrs.
-----
43- ماذا تعرف عن ng-template؟
- راجع الاجابة 2 في اجابة السؤال رقم 40.
-----
44- ما الفرق بين [value] و [ngValue]؟
- ال[value]:
هي Html attribute وبهذا الشكل تستخدم لأخذ قيمة ديناميكية؛ وهذا عبارة عن one-way data binding.
- ال[ngValue]:
هي property binding تستخدم في الAngular وهي عبارة عن two-way data binding؛ لانها تتأثر بالts code وتؤثر فيه.
-----
45- ما هي الAngular universal؟
- في الوضع الافتراضي الAngular تكون CSR أي انها Client-side-rendering وهذا يؤدي إلى الضعف في الكثير من الجوانب؛ فحلت الAngular universal هذه المشكلة فعند إضافتها يتحول الموقع بعد بضع التعديلات إلى SSR أي يصبح Server-side-rendering.
- الSSR مهم للكثير من المواقع حيث انه يقوي الSEO ويجعل الموقع أسرع.
- فهذه الpackage تحل هذه المشكلة؛ فبإختصار شديد هي package لتحويل موقع الAngular من CSR إلى SSR وتقوية الSEO وزيادة السرعة والAccessibility.
-----
46- ما الفرق بين PathLocationStrategy والHashLocationStrategy؟
- الفرق هو ان:
الPathLocationStrategy:
- هي الوضع الافتراضي في الAngular للتنقل بين الصفحات ويكون شكل الرابط بدون # أي انه يكون مثلًا: myLink/products
- افضل للSeo.
- يستخدم HTML5 History API للمتصفحات الحديثة.
--
والHashLocationStrategy:
- هي ان الرابط يحتوي على # أي انه يكون: myLink/#/products
- افضل للمتصفحات القديمة.
-----
47- ما الفرق بين ( ng-valid[required]. ) و(ng-valid.required.)؟
- الاتنين بتوفرهملك الAngular كنوع من الstyle في الvalidation forms.
وبإختصار.
- ال(ng-valid[required].):
تقدر تتحكم من خلالها في الstyle، في حالة عندك ng-valid كclass وrequired كattribute.
- ال(ng-valid.required.):
تقدر تتحكم من خلالها في الstyle، في حالة ان الاتنين كانوا classes.


48- ما الفرق بين الAuthentication والAuthorization؟
- ممكن تختصر الإجابة إلى:
الAuthentication: بتخليك تسجل في الموقع؛ فهي بإختصار بتجاوب على سؤال «أنت مين؟» وبس.
الAuthorization: بتحدد دورك (role) في الموقع؛ فهي بإختصار بتجاوب على سؤال «ما هو المسموح لك في الموقع؟»؛ يعني لو مثلًا موقع تجاري وأنت تاجر فأنت بناء على الAuthorization تقدر تضيف منتج.
------
49- ماذا تعرف عن الdependency Injection design pattern؟
- هو design pattern أساسي في Angular لإدارة الdependencies في الComponent والServices؛ فهو يسمح لك بعمل حقن للميزات من الservices للComponents وجعلها في إطار مشترك بدل من الحاجة لإنشاء متكرر.
- يمكنك حقن الComponent عن طريق نظام Di Container الخاص بAngular وهو عن طريق انشاء instance او عن طريق الحقن بإستخدام decorator وهو @Inject.
- يمكنك من خلال الProviders ايضًا عمل حقن (injection) للComponents الخاصة بModule او للComponent بشكل خاص.
- وهناك المزيد من الطرق سبق شرحها في هذه السلسلة لا أريد أن اطيل الحديث هنا عنها.
- يسهل الDI عملية الTesting.
- يحقق مبدأ الSingleton.
------
50- ما هو الdatabinding وما هي أنواعه؟
- هو ربط بيانات ملف الTypeScript (ملف الSource) او ممكن تقول عنه عقل الComponent وملف الHtml (ملف الView)، الي بيتعرض فيه الUi الخاص بالComponent.
وينقسم لثلاث أنواع رئيسية:
1- من الSource للView.
2- من الView للSource.
3- الTwo way data binding.
--
من الSource للView بيضم النوعين دول:
- الInterpolation
- الProperty binding بتنقسم إلى:
- الAttribute Binding، -الClass Binding. -الStyle Binding. 
--
من الview للsource:
وهو الEvent Binding.
--
الTwo way:
من الView للSource للView.
وبدون دخول في تفاصيل هتلاقي كل الشرح في المقال ده:
https://lnkd.in/dS_fENEZ
------
51- ما هي الMetadata داخل الComponent؟
الMetadata بالعربي (البيانات التعريفية) دي عبارة عن معلومات بنديها للComponent وبناء على المعلومات دي بتحدد الFiles والFunction والServices والanimations واذا كانت الComponent ليها changeDetection او تعديل على الencapsulation.
والComponent ليها 12 metadata، المهم منهم بشكل أساسي:
- الselector.
- إما الtemplate أو الtemplateUrl.
- إما styles أو الstyleUrls.
- والبقية: inputs وoutputs وproviders وviewProviders وanimations وchangeDetection وencapsulation.
ولا يتسع المقال هنا لشرحهم جميعًا سيتم شرحهم في مقال منفصل.
------
52- ما هي الAngular Material؟
هي مكتبة إنشاءها فريق عمل Angular لعمل Components جاهزة وفعالة ومساعدتنا في عمل Ui مميز يتبع ويحتوي على التالي:
1- الMaterial Design وهو نوع Design حديث تستخدمه أغلب الFrameworks.
2- الModular and Customizable.
3- الResponsive Design.
4- الRich Set of UI Components.
5- الTheming and Styling.
6- الAccessibility.
7- الAnimations.
8- الCDK.
9- الInternationalization.
10- الForm Controls.

53- ما هو الTranspiling في الAngular؟
- هو مفهوم تحويل Typescript إلى JavaScript.
شرح الإجابة:
يتم من تحويل الTypescript إلى javaScript عن طريق الTypeScript compiler عن طريق تحديد نوع الEcmaScript المطلوبة داخل الtsconfig json يهدف للتوافق مع المتصفحات والتحقق من الType معًا.
------
54- ما هو الLazy loading؟
هو أسلوب يسمح لك بتحميل أجزاء من التطبيق الخاص بك فقط عند الحاجة إليها، بدلاً من تحميل التطبيق بالكامل مقدمًا عندما يصل المستخدم إلى الموقع لأول مرة، يؤدي ذلك إلى تحسين وقت التحميل الأولي والأداء العام لتطبيق Angular بشكل كبير، خاصة بالنسبة للمشاريع الكبيرة والمعقدة.
------
55- ما هو الAngular Structure؟
المقصود بهذا المفهوم هو تنظيم الملفات مثل:
ما بداخل الapp folder وما بداخل الassets folder.
ويشمل هذا المفهوم كل الFolders والFiles الموجودة في Angular؛ فإذا كان الStructure منظم سيكون العمل أسهل وقابل للصيانة والتعديل والتوسع.
------
56- ماذا تعرف عن ViewContainerRef؟
الAngular بتوفرلك طرق للتحكم بالdom من خلال ViewChild؛ وعشان الAngular يكون Strict اكتر وجاهز بالFunctions المطلوبة لأي حاجة الViewChild بيعملها attached، بيكون عندك Classes لتحديد نوع العنصر، ومن ضمن الClasses هو الViewContainerRef.
- هو عبارة عن الclass المسؤول عن الref الخاص بالViewContainer الي هو عبارة عن container مسؤول عن انشاء dynamic views.
- فالViewContainerRef بيوفرلك طرق ديناميكية للتعديل والانشاء والحذف، يستخدم بشكل شائع في عمل dynamic components وdynamic forms.
- ليه methods مساعدة زي: clear وget.
- يمكنك انشاء طريقة عرض مضمنة عن طريق createEmbeddedView.
- تقدر تpass من خلاله data للcontainer.
------
57- ماذا تعرف عن TemplateRef؟
كما قلنا؛ فهي أيضًا Class للViewChild ولكنه متخصص اكتر في التعامل مع الref الخاص بng-template.
- يسمح لك بإنشاء reusable templates.
- يمكنك انشاء طريقة عرض مضمنة عن طريق createEmbeddedView.
- تقدر تpass من خلاله data للTemplate.
- يستخدم في custom structural directives.
------
58- ماذا تعرف عن ElementRef؟
مثل ما قبلها ولكن يتم استخدامها للوصول لجميع الخصائص والعناصر من خلال الRef.
ولكنها:
- تستخدم لتغيير خصائص عنصر HTML محدد، مثل تعيين لون خلفية div أو تغيير محتوى النص في فقرة وليست للمحتوى الديناميكي.
- يستخدم للتعامل مع third-party libraries.
------
59- ما الفرق بين ElementRef وTemplateRef؟
- استخدام ElementRef بتكون لأغراض الStyle او الخصائص الخاصة بHtml element.
- اما استخدام TemplateRef بتقدر تنشأ محتوى ديناميكي من خلال createEmbeddedView وتpass داتا من الTs file وهي اشبه بالngFor ولا تستخدم لأغراض الCss.
------
60- ماذا تعرف عن @ViewChild ومتى استخدم read ومتى استخدم static؟
- تستخدم لعمل attached لعنصر داخل الView او للتعامل مع child components.
- الread يستخدم لتحديد نوع العنصر أو انه يتأكد (strict) من نوع العنصر بناء عليه، مثال: ({ read: ElementRef }).
- الstatic تستخدم لتحديد الlife cycle التي يمكن عندها التعامل مع الelement.
في حالة true تكون ngOnInit.
في حالة false تكون ngAfterViewInit وهو الdefault.


/////////////////////////////////////////////////////////////////////



تحديثات Angular 17.🔻
مقدمة:
التحديثات كانت نتيجة لمجهود مستمر من فريق Angular لعمل تغييرات جذرية بها، لم تكن التحديثات تخص فقط إضافات جديدة او تحسينات للأداء بل أيضًا إضافة Syntax جديد خاصة للControl flow.
-----
ما الجديد؟
1- أصبح من السهل عمل بروجيكت SSR:
- أضافت الAngular اختيار عن طريق سؤال اذا كنت تريد البروجيكت SSR ومن ثم يتم انشاء جميع الملفات على هذا النحو، بالإضافة إلى تحسينات في ميكانيزم الSSR نفسه وهو ما تم توضيحه في الdocs الخاصة بالموقع الجديد لAngular.
--
2- موقع جديد للdocs:
- وبشكل جديد ومتناسق وأفضل من القديم، الآن يمكنك تصفح الDocs بشكل أسرع؛ لأنهم استخدموا جميع التحديثات في عمل الموقع الجديد لهم مما جعل الموقع اسرع وسلس اكثر.
كما تم إضافة Play ground داخل الموقع.
--
3- إضافة Syntax جديد للControl Flow داخل الTemplate:
وهذا الSyntax بديل للDirectives القديمة مثل ngFor وngIf ومن مميزاتها أيضًا انها Build-in وتكتب بطريقة تشبه إلى حد كبير الطريقة التي يكتب بها الJSX داخل الReact.
مثال:
@if (user) {
Hello {{user}}
}
--
4- إضافة Vite:
- في التحديث الأخير تم استبدال الWebpack والاعتماد على Vite بدلًا منها، وهو لغرض تحسين التجربة اثناء الDev mode (اثناء العمل على المشروع).
--
5- إضافة الesbuild:
- مع إضافة الesbuild للVite تحسن وقت البناء بنسبة 67%، وكان ذلك خلاصة التجربة التي تم الاعتماد عليها في الإصدار السابق؛ لذا قرر فريق التطوير الاعتماد على كليهما في الAngular 17.
--
6- ليس هناك داعي للNgModules:
- مع التحديث الأخير تم وضع كل شئ في الوضع الافتراضي كبيئة متكاملة لجعل كل شئ مستقل وحر standalone، وتم حل المشكلات على مدار عام ونصف؛ فلم يعد هناك حاجة لإستخدام الNgModules كما يوصي فريق التطوير بذلك لكي تصبح مشاريعك اسرع بأضعاف.
--
7- الAnimations:
- تمت إضافة Syntax كbuild in لتسهيل الAnimations مع Angular.
--
8- الDeferrable views:
اهم نقطة في التحديث، وهي خاصية lazy loading، داخل الtemplate نفسه عندما تريد تحميل component بداخله؛ فيمكنك وضع صورة مؤقتة إلى ان يتم تحليل الComponent او وضع رسالة في حالة الError، مثال:
@defer (on viewport) {
 <comment-list/>
} @loading {
 Loading…
} @error {
 Loading failed :(
} @placeholder {
 <img src="comments-placeholder.png">
}
ولكن من ضمن عيوب هذه الخاصية انها لا تعمل مع الSSR في الوضع الافتراضي؛ فيجب الحذر اثناء استخدامها.
----
ما القادم؟
1- على الرغم من ان الSignals قدمت في الاصدار 16 ولكن جاري العمل عليها لجعلها مثمرة اكثر في الاصدارات القادمة بدءًا من 18 مع جعلها ذات معنى واضح، ولكنها الآن مستقرة تمامًا في هذا الإصدار وخاصة عند دمجها مع الRxjs.
--
2- الTesting سيتم إضافة Jest لكي لا يفرض عليك كمطور Angular التعامل مع Karma.
--
3- الرجوع إلى العمل اكثر على Angular material حيث أنه اخر مرة حدث كانت مع الإصدار 15.







